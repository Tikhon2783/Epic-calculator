// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrchestratorService_KillOrch_FullMethodName       = "/calc.OrchestratorService/KillOrch"
	OrchestratorService_KillAgent_FullMethodName      = "/calc.OrchestratorService/KillAgent"
	OrchestratorService_ReviveAgent_FullMethodName    = "/calc.OrchestratorService/ReviveAgent"
	OrchestratorService_SendExp_FullMethodName        = "/calc.OrchestratorService/SendExp"
	OrchestratorService_CheckExp_FullMethodName       = "/calc.OrchestratorService/CheckExp"
	OrchestratorService_GetExps_FullMethodName        = "/calc.OrchestratorService/GetExps"
	OrchestratorService_GetTimes_FullMethodName       = "/calc.OrchestratorService/GetTimes"
	OrchestratorService_SetTimes_FullMethodName       = "/calc.OrchestratorService/SetTimes"
	OrchestratorService_Monitor_FullMethodName        = "/calc.OrchestratorService/Monitor"
	OrchestratorService_SendHeartbeat_FullMethodName  = "/calc.OrchestratorService/SendHeartbeat"
	OrchestratorService_SendResult_FullMethodName     = "/calc.OrchestratorService/SendResult"
	OrchestratorService_UpdateResult_FullMethodName   = "/calc.OrchestratorService/UpdateResult"
	OrchestratorService_SeekForExp_FullMethodName     = "/calc.OrchestratorService/SeekForExp"
	OrchestratorService_ConfirmTakeExp_FullMethodName = "/calc.OrchestratorService/ConfirmTakeExp"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorServiceClient interface {
	// методы для общения фронта с оркестратором
	KillOrch(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ErrorResponse, error)
	KillAgent(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AgentAndErrorResponse, error)
	ReviveAgent(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AgentAndErrorResponse, error)
	SendExp(ctx context.Context, in *ExpSendRequest, opts ...grpc.CallOption) (*AgentAndErrorResponse, error)
	CheckExp(ctx context.Context, in *ExpCheckRequest, opts ...grpc.CallOption) (*ExpCheckResponse, error)
	GetExps(ctx context.Context, in *UsernameOnlyRequest, opts ...grpc.CallOption) (*ExpsGetResponse, error)
	GetTimes(ctx context.Context, in *UsernameOnlyRequest, opts ...grpc.CallOption) (*TimesResponse, error)
	SetTimes(ctx context.Context, in *TimesSetRequest, opts ...grpc.CallOption) (*TimesSetResponse, error)
	Monitor(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*MonitorResponse, error)
	// методы для общения агентов с оркестратором
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	SendResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	UpdateResult(ctx context.Context, in *ExpUpdateRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	SeekForExp(ctx context.Context, in *ExpSeekRequest, opts ...grpc.CallOption) (*ExpSeekResponse, error)
	ConfirmTakeExp(ctx context.Context, in *ExpConfirmRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) KillOrch(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_KillOrch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) KillAgent(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AgentAndErrorResponse, error) {
	out := new(AgentAndErrorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_KillAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ReviveAgent(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AgentAndErrorResponse, error) {
	out := new(AgentAndErrorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_ReviveAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SendExp(ctx context.Context, in *ExpSendRequest, opts ...grpc.CallOption) (*AgentAndErrorResponse, error) {
	out := new(AgentAndErrorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_SendExp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) CheckExp(ctx context.Context, in *ExpCheckRequest, opts ...grpc.CallOption) (*ExpCheckResponse, error) {
	out := new(ExpCheckResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_CheckExp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetExps(ctx context.Context, in *UsernameOnlyRequest, opts ...grpc.CallOption) (*ExpsGetResponse, error) {
	out := new(ExpsGetResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetExps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetTimes(ctx context.Context, in *UsernameOnlyRequest, opts ...grpc.CallOption) (*TimesResponse, error) {
	out := new(TimesResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SetTimes(ctx context.Context, in *TimesSetRequest, opts ...grpc.CallOption) (*TimesSetResponse, error) {
	out := new(TimesSetResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_SetTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) Monitor(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*MonitorResponse, error) {
	out := new(MonitorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_Monitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, OrchestratorService_SendHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SendResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, OrchestratorService_SendResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) UpdateResult(ctx context.Context, in *ExpUpdateRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, OrchestratorService_UpdateResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) SeekForExp(ctx context.Context, in *ExpSeekRequest, opts ...grpc.CallOption) (*ExpSeekResponse, error) {
	out := new(ExpSeekResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_SeekForExp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ConfirmTakeExp(ctx context.Context, in *ExpConfirmRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_ConfirmTakeExp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility
type OrchestratorServiceServer interface {
	// методы для общения фронта с оркестратором
	KillOrch(context.Context, *EmptyMessage) (*ErrorResponse, error)
	KillAgent(context.Context, *EmptyMessage) (*AgentAndErrorResponse, error)
	ReviveAgent(context.Context, *EmptyMessage) (*AgentAndErrorResponse, error)
	SendExp(context.Context, *ExpSendRequest) (*AgentAndErrorResponse, error)
	CheckExp(context.Context, *ExpCheckRequest) (*ExpCheckResponse, error)
	GetExps(context.Context, *UsernameOnlyRequest) (*ExpsGetResponse, error)
	GetTimes(context.Context, *UsernameOnlyRequest) (*TimesResponse, error)
	SetTimes(context.Context, *TimesSetRequest) (*TimesSetResponse, error)
	Monitor(context.Context, *EmptyMessage) (*MonitorResponse, error)
	// методы для общения агентов с оркестратором
	SendHeartbeat(context.Context, *HeartbeatRequest) (*EmptyMessage, error)
	SendResult(context.Context, *ResultRequest) (*EmptyMessage, error)
	UpdateResult(context.Context, *ExpUpdateRequest) (*EmptyMessage, error)
	SeekForExp(context.Context, *ExpSeekRequest) (*ExpSeekResponse, error)
	ConfirmTakeExp(context.Context, *ExpConfirmRequest) (*ErrorResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServiceServer struct {
}

func (UnimplementedOrchestratorServiceServer) KillOrch(context.Context, *EmptyMessage) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillOrch not implemented")
}
func (UnimplementedOrchestratorServiceServer) KillAgent(context.Context, *EmptyMessage) (*AgentAndErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAgent not implemented")
}
func (UnimplementedOrchestratorServiceServer) ReviveAgent(context.Context, *EmptyMessage) (*AgentAndErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviveAgent not implemented")
}
func (UnimplementedOrchestratorServiceServer) SendExp(context.Context, *ExpSendRequest) (*AgentAndErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendExp not implemented")
}
func (UnimplementedOrchestratorServiceServer) CheckExp(context.Context, *ExpCheckRequest) (*ExpCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExp not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetExps(context.Context, *UsernameOnlyRequest) (*ExpsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExps not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetTimes(context.Context, *UsernameOnlyRequest) (*TimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimes not implemented")
}
func (UnimplementedOrchestratorServiceServer) SetTimes(context.Context, *TimesSetRequest) (*TimesSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimes not implemented")
}
func (UnimplementedOrchestratorServiceServer) Monitor(context.Context, *EmptyMessage) (*MonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedOrchestratorServiceServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedOrchestratorServiceServer) SendResult(context.Context, *ResultRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedOrchestratorServiceServer) UpdateResult(context.Context, *ExpUpdateRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResult not implemented")
}
func (UnimplementedOrchestratorServiceServer) SeekForExp(context.Context, *ExpSeekRequest) (*ExpSeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeekForExp not implemented")
}
func (UnimplementedOrchestratorServiceServer) ConfirmTakeExp(context.Context, *ExpConfirmRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTakeExp not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_KillOrch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).KillOrch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_KillOrch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).KillOrch(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_KillAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).KillAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_KillAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).KillAgent(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ReviveAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ReviveAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_ReviveAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ReviveAgent(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SendExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SendExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SendExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SendExp(ctx, req.(*ExpSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_CheckExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).CheckExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_CheckExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).CheckExp(ctx, req.(*ExpCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetExps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetExps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetExps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetExps(ctx, req.(*UsernameOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetTimes(ctx, req.(*UsernameOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SetTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimesSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SetTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SetTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SetTimes(ctx, req.(*TimesSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_Monitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).Monitor(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SendResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_UpdateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).UpdateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_UpdateResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).UpdateResult(ctx, req.(*ExpUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_SeekForExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpSeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).SeekForExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_SeekForExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).SeekForExp(ctx, req.(*ExpSeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ConfirmTakeExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ConfirmTakeExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_ConfirmTakeExp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ConfirmTakeExp(ctx, req.(*ExpConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calc.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KillOrch",
			Handler:    _OrchestratorService_KillOrch_Handler,
		},
		{
			MethodName: "KillAgent",
			Handler:    _OrchestratorService_KillAgent_Handler,
		},
		{
			MethodName: "ReviveAgent",
			Handler:    _OrchestratorService_ReviveAgent_Handler,
		},
		{
			MethodName: "SendExp",
			Handler:    _OrchestratorService_SendExp_Handler,
		},
		{
			MethodName: "CheckExp",
			Handler:    _OrchestratorService_CheckExp_Handler,
		},
		{
			MethodName: "GetExps",
			Handler:    _OrchestratorService_GetExps_Handler,
		},
		{
			MethodName: "GetTimes",
			Handler:    _OrchestratorService_GetTimes_Handler,
		},
		{
			MethodName: "SetTimes",
			Handler:    _OrchestratorService_SetTimes_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _OrchestratorService_Monitor_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _OrchestratorService_SendHeartbeat_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _OrchestratorService_SendResult_Handler,
		},
		{
			MethodName: "UpdateResult",
			Handler:    _OrchestratorService_UpdateResult_Handler,
		},
		{
			MethodName: "SeekForExp",
			Handler:    _OrchestratorService_SeekForExp_Handler,
		},
		{
			MethodName: "ConfirmTakeExp",
			Handler:    _OrchestratorService_ConfirmTakeExp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/calculator.proto",
}
